kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
data:
  nginx.conf: |-
    user nginx;
    worker_processes auto;
    pid /run/nginx.pid;
    include /etc/nginx/modules-enabled/*.conf;

    events {
        worker_connections 768;
    }
    http {

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        upstream docker-manager {
          server mainflux-manager:8180;
        }
        upstream docker-http {
          server mainflux-http:8182;
        }
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            server_name localhost;
            access_log off;
            error_log off;
            return 301 https://$server_name$request_uri;
        }
        server {
            listen 443 ssl http2 default_server;
            listen [::]:443 ssl http2 default_server;
            ssl_certificate /etc/ssl/certs/mainflux-server.crt;
            ssl_certificate_key /etc/ssl/private/mainflux-server.key;
            ssl_dhparam /etc/ssl/certs/dhparam.pem;
            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
            ssl_prefer_server_ciphers on;
            ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
            ssl_ecdh_curve secp384r1;
            ssl_session_tickets off;
            ssl_stapling off;
            ssl_stapling_verify on;
            resolver 8.8.8.8 8.8.4.4 valid=300s;
            resolver_timeout 5s;
            add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header Access-Control-Allow-Origin '*';
            add_header Access-Control-Allow-Methods '*';
            add_header Access-Control-Allow-Headers "*";
            server_name localhost;
            location / {
                proxy_redirect off;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_pass http://docker-manager;
                if ($request_method = OPTIONS ) {
                  add_header Content-Length 0;
                  add_header Content-Type text/plain;
                  return 200;
                }
            }
            location ~ ^/channels/[a-zA-Z0-9-]+/messages$ {
                proxy_redirect off;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_pass http://docker-http;
                if ($request_method = OPTIONS ) {
                  add_header Content-Length 0;
                  add_header Content-Type text/plain;
                  return 200;
                }
            }
        }
    }
    stream {
        upstream docker-mqtt {
            server mainflux-mqtt:1883;
        }
        server {
            listen               8883 ssl;
            proxy_pass           docker-mqtt;
            ssl_certificate /etc/ssl/certs/mainflux-server.crt;
            ssl_certificate_key /etc/ssl/private/mainflux-server.key;
            ssl_dhparam /etc/ssl/certs/dhparam.pem;
            ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
            ssl_prefer_server_ciphers on;
            ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
            ssl_ecdh_curve secp384r1;
            ssl_session_cache shared:SSL:10m;
            ssl_session_tickets off;
        }
    }
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  # namespace: ingress-nginx
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  # namespace: ingress-nginx
